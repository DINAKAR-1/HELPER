import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Example: reading integers
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Call your solution
        System.out.println(solve(arr));
    }

    // Example function to solve problem
    private static int solve(int[] arr) {
        // Your genius code goes here
        return Arrays.stream(arr).sum();
    }
}

------------------------------------------
String s = sc.nextLine();
List<String> words = Arrays.asList(s.split(" "));
------------------------------------------
int rows = sc.nextInt();
int cols = sc.nextInt();
int[][] grid = new int[rows][cols];
for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
        grid[i][j] = sc.nextInt();
    }
}

-----------------------------------
int[] arr = {5, 1, 9, 3};
Arrays.sort(arr); // ascending order
System.out.println(Arrays.toString(arr)); // [1, 3, 5, 9]

// descending order (need boxing)
Integer[] arrBoxed = Arrays.stream(arr).boxed().toArray(Integer[]::new);
Arrays.sort(arrBoxed, Collections.reverseOrder());
System.out.println(Arrays.toString(arrBoxed)); // [9, 5, 3, 1]
--------------------------

Integer[] nums = {5, 1, 9, 3};
Arrays.sort(nums); // ascending
Arrays.sort(nums, Collections.reverseOrder()); // descending
-----------------------------
List<Integer> list = new ArrayList<>(Arrays.asList(5, 1, 9, 3)); without new only fixed list 
Collections.sort(list); // ascending
Collections.sort(list, Collections.reverseOrder()); // descending

-------------------------------------
String[] words = {"apple", "banana", "kiwi"};
Arrays.sort(words, (a, b) -> b.length() - a.length()); 
System.out.println(Arrays.toString(words)); // [banana, apple, kiwi]
