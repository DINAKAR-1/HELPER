Q1: What is the difference between var, let, and const?
A1:

var: function-scoped, can be redeclared, hoisted with undefined. Basically a clingy ex—you think it’s gone but it pops up everywhere.

let: block-scoped, can be reassigned but not redeclared in the same scope.

const: block-scoped, must be initialized, cannot be reassigned (but objects/arrays can still be mutated).

Q2: What are arrow functions and why are they useful?
A2:
Arrow functions are a shorter syntax for writing functions. They also lexically bind this (no more that = this hacks).

Example:

const add = (a, b) => a + b;


Q3: What is template literal in ES6?
A3:
String interpolation with backticks `. Lets you embed variables and expressions easily.

let name = "Dinakar";
console.log(`Hello, ${name}!`); // Hello, Dinakar!


Q4: What are default parameters?
A4:
Function parameters can have default values if not provided.

function greet(name = "Stranger") {
  return `Hello, ${name}`;
}


Q5: What is destructuring in ES6?
A5:
Extract values from arrays/objects into variables. Saves you from typing like a caveman.

const [a, b] = [1, 2];
const {name, age} = {name: "Dinakar", age: 25};


Q6: What is the spread operator (...) used for?
A6:
Expands arrays/objects.

const arr1 = [1, 2];
const arr2 = [...arr1, 3, 4]; // [1, 2, 3, 4]

const obj1 = {a:1};
const obj2 = {...obj1, b:2}; // {a:1, b:2}


Q7: What are Promises in ES6?
A7:
A cleaner way to handle async code than callback hell.

const fetchData = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Data fetched"), 1000);
});

fetchData.then(data => console.log(data));


Q8: What is async/await?
A8:
Syntactic sugar over promises. Lets you write async code like sync code.

async function fetchData() {
  let data = await Promise.resolve("Data fetched");
  console.log(data);
}


Q9: What are ES6 Modules?
A9:
You can export and import code across files.

// math.js
export const add = (a, b) => a + b;

// app.js
import { add } from './math.js';


Q10: What is the difference between for...of and for...in?
A10:

for...in: loops over keys (indexes in arrays, property names in objects).

for...of: loops over values (array items, iterable objects).

let arr = [10, 20, 30];
for (let i in arr) console.log(i); // 0, 1, 2
for (let v of arr) console.log(v); // 10, 20, 30..
