package in.gov.cgg.utils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.security.KeyManagementException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.SSLContext;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.stereotype.Component;


@Component
public class SmsSender {

	
	/**
	 * Send Single text SMS
	 * @param username : Department Login User Name
	 * @param password : Department Login Password
	 * @param message  : Message e.g. 'Welcome to mobile Seva'
	 * @param senderId	: Department allocated SenderID
	 * @param mobileNumber : Single Mobile Number e.g. '99XXXXXXX' 
	 * @param secureKey :  Department key generated by login to services portal
	 * @return {@link String} response from Mobile Seva Gateway e.g. '402,MsgID = 150620161466003974245msdgsms' 
	 * @see <a href="https://mgov.gov.in/msdp_sms_push.jsp">Return types code details</a>
	 * 
	 */
	
	
	//static final String username = "cgg-ipm";
	//static final String password = "iPs#MS67";
	//static final String senderId = "IPMSMS";
	//static String secureKey = "c7f0e7b9-77ac-498a-8a6f-dd7f3b664434";
	static final String url="https://msdgweb.mgov.gov.in/esms/sendsmsrequestDLT";
	
	static final String username = "cgg-TSROWP";
	static final String password = "Tsrowp@9";
	static final String senderId = "TSROWP";
	static String secureKey = "578cdb23-c66b-4de3-a56f-b769eb9af8fc";
	
	public static String sendSMS(String mobileNumber,String message,String templateId)
	{
		System.out.println("\ninnnn-Road-SMS-CheckNew-templateid\n");
		
		String responseString = "";
		SSLSocketFactory sf=null;
		SSLContext context=null;
		String encryptedPassword;
		String line="";
		try 
		{
			//System.out.println("\ninnnn-Road-SMS-CheckNew1\n");
			context=SSLContext.getInstance("TLSv1.2");
			context.init(null, null, null);
			//System.out.println("\ninnnn-Road-SMS-CheckNew2\n");
			sf=new SSLSocketFactory(context, SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
			Scheme scheme=new Scheme("https",443,sf);
			HttpClient client=new DefaultHttpClient();
			client.getConnectionManager().getSchemeRegistry().register(scheme);
			//System.out.println("\ninnnn-Road-SMS-CheckNew3\n");
			HttpPost post=new HttpPost(url);
			encryptedPassword  = MD5(password);
			String genratedhashKey = hashGenerator(username, senderId, message, secureKey);
			List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(1);
			//System.out.println("\ninnnn-Road-SMS-CheckNew4\n");
			nameValuePairs.add(new BasicNameValuePair("mobileno", mobileNumber));
			nameValuePairs.add(new BasicNameValuePair("senderid", senderId));
			nameValuePairs.add(new BasicNameValuePair("content", message));
			//System.out.println("\ninnnn-Road-SMS-CheckNew5=="+mobileNumber+"=="+senderId+"=="+message+"\n");
			nameValuePairs.add(new BasicNameValuePair("smsservicetype", "singlemsg"));
			nameValuePairs.add(new BasicNameValuePair("username", username));
			//System.out.println("\ninnnn-Road-SMS-CheckNew6=="+mobileNumber+"=="+senderId+"=="+message+"\n");
			nameValuePairs.add(new BasicNameValuePair("password", encryptedPassword));
			nameValuePairs.add(new BasicNameValuePair("key", genratedhashKey));
			nameValuePairs.add(new BasicNameValuePair("templateid", templateId));
			post.setEntity(new UrlEncodedFormEntity(nameValuePairs));
			//System.out.println("\ninnnn-Road-SMS-CheckNew7=="+encryptedPassword+"\n");
			HttpResponse response=client.execute(post);
			BufferedReader bf=new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			//System.out.println("\ninnnn-Road-SMS-CheckNew8=="+bf+"\n");
			while((line=bf.readLine())!=null)
			{
				responseString = responseString+line;
			}
			
			System.out.println("\nSmSrespString=="+responseString+"\n");
			
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return responseString;
	}

	/****
	 * Method  to convert Normal Plain Text Password to MD5 encrypted password
	 ***/
	
	private static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException  
	{ 
		MessageDigest md;
		md = MessageDigest.getInstance("SHA-1");
		byte[] md5 = new byte[64];
		md.update(text.getBytes("iso-8859-1"), 0, text.length());
		md5 = md.digest();
		return convertedToHex(md5);
	}
	
	private static String convertedToHex(byte[] data) 
	{ 
		StringBuffer buf = new StringBuffer();

		for (int i = 0; i < data.length; i++) 
		{ 
			int halfOfByte = (data[i] >>> 4) & 0x0F;
			int twoHalfBytes = 0;

			do 
			{ 
				if ((0 <= halfOfByte) && (halfOfByte <= 9)) 
				{
					buf.append( (char) ('0' + halfOfByte) );
				}

				else 
				{
					buf.append( (char) ('a' + (halfOfByte - 10)) );
				}

				halfOfByte = data[i] & 0x0F;

			} while(twoHalfBytes++ < 1);
		} 
		return buf.toString();
	}

	protected static String hashGenerator(String userName, String senderId, String content, String secureKey) 
	{
		// TODO Auto-generated method stub
		StringBuffer finalString=new StringBuffer();
		finalString.append(userName.trim()).append(senderId.trim()).append(content.trim()).append(secureKey.trim());
		//		logger.info("Parameters for SHA-512 : "+finalString);
		String hashGen=finalString.toString();
		StringBuffer sb = null;
		MessageDigest md;
		try 
		{
			md = MessageDigest.getInstance("SHA-512");
			md.update(hashGen.getBytes());
			byte byteData[] = md.digest();
			//convert the byte to hex format method 1
			sb = new StringBuffer();
			
			for (int i = 0; i < byteData.length; i++) 
			{
				sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
			}

		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return sb.toString();
	}
	public static void main(String[] args) {
		String message = "Dear Applicant, your registration is successful - TSROWP";
		String mobileNo = "9989742409";
	
		
		try{
			//			sendSingleSMSPost(username, password, message, senderid, mobileNo, secureKey);
			String response=sendSMS(mobileNo,message,"1007852097487744086");
			System.out.println("response--->"+response);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
}
